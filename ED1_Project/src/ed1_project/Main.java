package ed1_project;

import java.awt.Color;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BiGrafo = new javax.swing.JDialog();
        jPanel11 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        combo2 = new javax.swing.JComboBox<>();
        combo = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jButton23 = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        DiGrafo = new javax.swing.JDialog();
        jPanel12 = new javax.swing.JPanel();
        jButton26 = new javax.swing.JButton();
        origen = new javax.swing.JComboBox<>();
        destino = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabla2 = new javax.swing.JTable();
        spinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        text_area1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jButton15 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        calcu_text = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jButton20 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        text_huffman = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jButton25 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jButton22 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();

        jPanel11.setBackground(new java.awt.Color(0, 102, 102));

        jLabel1.setBackground(new java.awt.Color(204, 204, 0));
        jLabel1.setFont(new java.awt.Font("Khmer UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Seleccione los nodos que desea conectar");

        combo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboItemStateChanged(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nodo", "Conexiones"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tabla);

        jButton23.setText("Conectar");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(combo2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton23, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(78, 78, 78)))
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(combo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton23))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout BiGrafoLayout = new javax.swing.GroupLayout(BiGrafo.getContentPane());
        BiGrafo.getContentPane().setLayout(BiGrafoLayout);
        BiGrafoLayout.setHorizontalGroup(
            BiGrafoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        BiGrafoLayout.setVerticalGroup(
            BiGrafoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel12.setBackground(new java.awt.Color(0, 102, 102));

        jButton26.setText("Conectar");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        origen.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                origenItemStateChanged(evt);
            }
        });

        destino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinoActionPerformed(evt);
            }
        });

        tabla2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Origen", "Destino", "Peso"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tabla2);

        spinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        spinner.setEditor(new javax.swing.JSpinner.NumberEditor(spinner, ""));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Peso");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Origen");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Destino");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(destino, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(origen, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton26, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(origen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(destino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(17, 17, 17)
                        .addComponent(jButton26))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout DiGrafoLayout = new javax.swing.GroupLayout(DiGrafo.getContentPane());
        DiGrafo.getContentPane().setLayout(DiGrafoLayout);
        DiGrafoLayout.setHorizontalGroup(
            DiGrafoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        DiGrafoLayout.setVerticalGroup(
            DiGrafoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        jPanel2.setPreferredSize(new java.awt.Dimension(480, 448));

        text_area1.setEditable(false);
        text_area1.setColumns(20);
        text_area1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        text_area1.setRows(5);
        text_area1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        jScrollPane1.setViewportView(text_area1);

        jButton1.setText("Seleccionar Archivo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Resolver");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(152, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Backtracking", jPanel2);

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton15.setBackground(new java.awt.Color(0, 102, 102));
        jButton15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton15.setText("0");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton11.setBackground(new java.awt.Color(0, 102, 102));
        jButton11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton11.setText("1");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(0, 102, 102));
        jButton7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton7.setText("4");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 102, 102));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setText("7");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 102, 102));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setText("8");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(0, 102, 102));
        jButton8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton8.setText("5");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton12.setBackground(new java.awt.Color(0, 102, 102));
        jButton12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton12.setText("2");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton16.setBackground(new java.awt.Color(0, 102, 102));
        jButton16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton16.setText(".");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setBackground(new java.awt.Color(0, 102, 102));
        jButton17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton17.setText("=");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton13.setBackground(new java.awt.Color(0, 102, 102));
        jButton13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton13.setText("3");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(0, 102, 102));
        jButton9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton9.setText("6");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(0, 102, 102));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton5.setText("9");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton19.setBackground(new java.awt.Color(0, 102, 102));
        jButton19.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton19.setText("C");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(0, 102, 102));
        jButton6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton6.setText("/");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton10.setBackground(new java.awt.Color(0, 102, 102));
        jButton10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton10.setText("x");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton14.setBackground(new java.awt.Color(0, 102, 102));
        jButton14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton14.setText("-");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton18.setBackground(new java.awt.Color(0, 102, 102));
        jButton18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton18.setText("+");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        calcu_text.setEditable(false);
        calcu_text.setColumns(20);
        calcu_text.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        calcu_text.setRows(5);
        calcu_text.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 102), 10));
        jScrollPane2.setViewportView(calcu_text);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton17, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(172, 172, 172)
                                .addComponent(jButton13)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jButton15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton16))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jButton11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton12))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton4))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jButton7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton8)))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton19))))
                .addGap(27, 27, 27))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        jPanel10Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton10, jButton11, jButton12, jButton13, jButton14, jButton15, jButton16, jButton17, jButton18, jButton19, jButton3, jButton4, jButton5, jButton6, jButton7, jButton8, jButton9});

        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jButton19)
                .addGap(7, 7, 7)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton8)
                    .addComponent(jButton9)
                    .addComponent(jButton10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton11)
                    .addComponent(jButton12)
                    .addComponent(jButton13)
                    .addComponent(jButton14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton15)
                    .addComponent(jButton16)
                    .addComponent(jButton17)
                    .addComponent(jButton18))
                .addGap(25, 25, 25))
        );

        jPanel10Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton10, jButton11, jButton12, jButton13, jButton14, jButton15, jButton16, jButton17, jButton18, jButton3, jButton4, jButton5, jButton6, jButton7, jButton8, jButton9});

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(366, 366, 366))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(96, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Solucion Matematica", jPanel3);

        jButton20.setText("Seleccionar Archivo");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        jButton21.setText("Comprimir Archivo");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        text_huffman.setEditable(false);
        text_huffman.setColumns(20);
        text_huffman.setFont(new java.awt.Font("Segoe UI Emoji", 0, 13)); // NOI18N
        text_huffman.setRows(5);
        text_huffman.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 102), 3));
        jScrollPane3.setViewportView(text_huffman);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButton20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jButton20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(115, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Compresion de Archivos", jPanel4);

        jButton25.setText("Crear Grafo");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        jButton27.setText("Calcular Costo Minimo");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(446, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jButton25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton27)
                .addContainerGap(349, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Dijkstra", jPanel6);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 628, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 448, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("tab6", jPanel7);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 628, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 448, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("tab7", jPanel8);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 628, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 448, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("tab8", jPanel9);

        jButton22.setText("Crear Grafo");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jButton24.setText("Verificar");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(467, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(340, Short.MAX_VALUE)
                .addComponent(jButton24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton22)
                .addGap(56, 56, 56))
        );

        jTabbedPane1.addTab("Grafo Bicoloreable", jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        File fichero = null;
        FileReader fr = null;
        BufferedReader br = null;
        text_area1.setText("");
        int size = 0;
        try {
            JFileChooser jfc = new JFileChooser();
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto", "txt");
            jfc.setFileFilter(filtro);
            int seleccion = jfc.showOpenDialog(this);
            if (seleccion == JFileChooser.APPROVE_OPTION) {
                fichero = jfc.getSelectedFile();
                fr = new FileReader(fichero);
                br = new BufferedReader(fr);
                /*String linea;
                text_area1.setText("");
                while ((linea = br.readLine()) != null) {
                    text_area1.append(linea);
                    text_area1.append("\n");
                }*/
                Scanner sc = null;
                try {
                    sc = new Scanner(fichero);
                    sc.useDelimiter(",");
                    size = sc.nextInt();
                    matriz = new int[size][size];
                    int i = 0, j = 0;
                    while (sc.hasNext()) {
                        if (i < size && j < size) {
                            matriz[i][j] = sc.nextInt();
                            if (j == size - 1) {
                                i += 1;
                                j = 0;
                            } else {
                                j++;
                            }
                        }
                    }
                } catch (Exception e) {
                }
                sc.close();
            }
            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {
                    text_area1.setForeground(Color.WHITE);
                    text_area1.setBackground(Color.BLACK);
                    if (matriz[i][j] == 1) {
                        text_area1.append(" - ");
                    } else {
                        text_area1.append(" • ");
                    }
                    //text_area1.append(" [ " + matriz[i][j] + " ] ");

                }
                text_area1.append("\n");
            }

        } catch (HeadlessException | IOException e) {
            e.printStackTrace();
        }
        try {
            br.close();
            fr.close();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            boolean salida = true;

            ArrayStack laberinto = new ArrayStack(200);
            laberinto.push(new Posicion(0, 0, matriz[0][0] + ""));
            laberinto.push(new Posicion(1, 1, matriz[1][1] + ""));
            laberinto.push(new Posicion(2, 0, matriz[2][0] + ""));
            matriz[1][0] = 8;
            do {
                int cont = 0;
                for (int i = 0; i < matriz.length; i++) {
                    for (int j = 0; j < matriz.length; j++) {
                        if (matriz[i][j] == 0) {
                            cont++;
                        }
                    }
                }
                if (cont == 0) {
                    break;
                }

                if (matriz[laberinto.Top().getPosicioni()][laberinto.Top().getPosicionj()] != 0) {
                    laberinto.Top().setCaracter("8");
                }

                if (!"0".equals(laberinto.Top().getCaracter())) {
                    laberinto.Pop();
                } else if (laberinto.Top().getPosicionj() == matriz.length - 1) {
                    matriz[laberinto.Top().getPosicioni()][laberinto.Top().getPosicionj()] = 9;
                    salida = false;
                } else {
                    Posicion temporal = laberinto.Top();
                    matriz[laberinto.Top().getPosicioni()][laberinto.Top().getPosicionj()] = 8;

                    if (temporal.getPosicioni() - 1 >= 0) {
                        laberinto.push(new Posicion(temporal.getPosicioni() - 1, temporal.getPosicionj(), matriz[temporal.getPosicioni() - 1][temporal.getPosicionj()] + ""));
                    }
                    if (temporal.getPosicionj() + 1 < matriz.length) {
                        laberinto.push(new Posicion(temporal.getPosicioni(), temporal.getPosicionj() + 1, matriz[temporal.getPosicioni()][temporal.getPosicionj() + 1] + ""));
                    }
                    if (temporal.getPosicioni() + 1 < matriz.length) {
                        laberinto.push(new Posicion(temporal.getPosicioni() + 1, temporal.getPosicionj(), matriz[temporal.getPosicioni() + 1][temporal.getPosicionj()] + ""));
                    }
                    if (temporal.getPosicionj() - 1 > 0) {
                        laberinto.push(new Posicion(temporal.getPosicioni(), temporal.getPosicionj() - 1, matriz[temporal.getPosicioni()][temporal.getPosicionj() - 1] + ""));
                    }
                }
            } while (!laberinto.isEmpty() && salida);
            if (salida) {
                JOptionPane.showMessageDialog(this, "No se ha encontrado la ruta de salida X");
            } else {
                JOptionPane.showMessageDialog(this, "Se ha encontrado la ruta de salida ☺");
            }

            text_area1.setText("");
            for (int i = 0; i < matriz.length; i++) {
                for (int j = 0; j < matriz.length; j++) {
                    text_area1.setForeground(Color.WHITE);
                    text_area1.setBackground(Color.BLACK);
                    if (matriz[i][j] == 1) {
                        text_area1.append(" - ");
                    } else if (matriz[i][j] == 0) {
                        text_area1.append(" • ");
                    } else if (matriz[i][j] == 8) {
                        text_area1.append(" * ");
                    } else {
                        text_area1.append(" E ");
                    }
                }
                text_area1.append("\n");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ningun archivo");
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        calcu_text.append("/");
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        calcu_text.append("7");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        calcu_text.append("8");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        calcu_text.append("9");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        calcu_text.append("4");
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        calcu_text.append("5");
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        calcu_text.append("6");
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        calcu_text.append("*");
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        calcu_text.append("1");
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        calcu_text.append("2");
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        calcu_text.append("3");
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        calcu_text.append("-");
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        calcu_text.append("0");
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        calcu_text.append(".");
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        calcu_text.append("+");
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        calcu_text.setText("");
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        String cadena = calcu_text.getText();
        List lista = new List(100);
        try {
            String acum = "";
            for (int i = 0; i < cadena.length(); i++) {
                if (cadena.charAt(i) == '*' || cadena.charAt(i) == '/' || cadena.charAt(i) == '-' || cadena.charAt(i) == '+') {

                } else {
                    acum += cadena.charAt(i);
                }
                if (cadena.charAt(i) == '*' || cadena.charAt(i) == '/' || cadena.charAt(i) == '-' || cadena.charAt(i) == '+' || i == cadena.length() - 1) {
                    lista.insert(acum);
                    lista.insert(cadena.charAt(i) + "");
                    acum = "";
                }
            }
            lista.delete(lista.length - 1);
            boolean multiplicar = true;
            //multiplica
            do {
                for (int i = 0; i < lista.length; i++) {
                    if (lista.get(i).equals("*")) {
                        double num = Double.parseDouble(lista.get(i - 1) + "") * Double.parseDouble(lista.get(i + 1) + "");
                        lista.set(i - 1, num + "");
                        lista.set(i, "");
                        lista.set(i + 1, "");
                        break;
                    } else {

                    }
                }
                boolean seguir = true;
                do {
                    for (int i = 0; i < lista.length; i++) {
                        if (lista.get(i).equals("")) {
                            lista.delete(i);
                            seguir = true;
                            break;
                        } else {
                            seguir = false;
                        }
                    }
                } while (seguir);

                for (int i = 0; i < lista.length; i++) {
                    if (lista.get(i).equals("*")) {
                        multiplicar = true;
                        break;
                    } else {
                        multiplicar = false;
                    }
                }
            } while (multiplicar);

            //divide
            boolean dividir = true;
            do {
                for (int i = 0; i < lista.length; i++) {
                    if (lista.get(i).equals("/")) {
                        double num = Double.parseDouble(lista.get(i - 1) + "") / Double.parseDouble(lista.get(i + 1) + "");
                        lista.set(i - 1, num + "");
                        lista.set(i, "");
                        lista.set(i + 1, "");
                        break;
                    } else {

                    }
                }
                boolean seguir = true;
                do {
                    for (int i = 0; i < lista.length; i++) {
                        if (lista.get(i).equals("")) {
                            lista.delete(i);
                            seguir = true;
                            break;
                        } else {
                            seguir = false;
                        }
                    }
                } while (seguir);

                for (int i = 0; i < lista.length; i++) {
                    if (lista.get(i).equals("/")) {
                        dividir = true;
                        break;
                    } else {
                        dividir = false;
                    }
                }
            } while (dividir);

            //sumar
            boolean sumar = true;
            do {
                for (int i = 0; i < lista.length; i++) {
                    if (lista.get(i).equals("+")) {
                        double num = Double.parseDouble(lista.get(i - 1) + "") + Double.parseDouble(lista.get(i + 1) + "");
                        lista.set(i - 1, num + "");
                        lista.set(i, "");
                        lista.set(i + 1, "");
                        break;
                    } else {

                    }
                }
                boolean seguir = true;
                do {
                    for (int i = 0; i < lista.length; i++) {
                        if (lista.get(i).equals("")) {
                            lista.delete(i);
                            seguir = true;
                            break;
                        } else {
                            seguir = false;
                        }
                    }
                } while (seguir);

                for (int i = 0; i < lista.length; i++) {
                    if (lista.get(i).equals("+")) {
                        sumar = true;
                        break;
                    } else {
                        sumar = false;
                    }
                }
            } while (sumar);

            //restar
            boolean restar = true;
            do {
                for (int i = 0; i < lista.length; i++) {
                    if (lista.get(i).equals("-")) {
                        double num = Double.parseDouble(lista.get(i - 1) + "") - Double.parseDouble(lista.get(i + 1) + "");
                        lista.set(i - 1, num + "");
                        lista.set(i, "");
                        lista.set(i + 1, "");
                        break;
                    } else {

                    }
                }
                boolean seguir = true;
                do {
                    for (int i = 0; i < lista.length; i++) {
                        if (lista.get(i).equals("")) {
                            lista.delete(i);
                            seguir = true;
                            break;
                        } else {
                            seguir = false;
                        }
                    }
                } while (seguir);

                for (int i = 0; i < lista.length; i++) {
                    if (lista.get(i).equals("*")) {
                        restar = true;
                        break;
                    } else {
                        restar = false;
                    }
                }
            } while (restar);
            calcu_text.append(" = " + lista.get(0));
            //lista.print();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Syntax Error");
            //e.printStackTrace();
        }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        File fichero = null;
        text_huffman.setText("");
        Scanner sc = null;
        try {
            JFileChooser jfc = new JFileChooser();
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto", "txt");
            jfc.setFileFilter(filtro);
            int seleccion = jfc.showOpenDialog(this);
            if (seleccion == JFileChooser.APPROVE_OPTION) {
                fichero = jfc.getSelectedFile();
                sc = new Scanner(fichero);
                texto = sc.nextLine();
            }
            sc.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocurrio un error");
        }

        text_huffman.append(texto);

    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        try {
            //text_huffman.setText("");
            List lista = new List(200);
            ArrayList l = new ArrayList();
            if (!codes.isEmpty()) {
                codes.clear();
            }
            for (int i = 0; i < texto.length(); i++) {
                l.add(texto.charAt(i));
            }

            for (int i = 0; i < l.size(); i++) {
                int cont = 1;
                for (int j = i + 1; j < l.size(); j++) {
                    if (((char) l.get(i)) == ((char) l.get(j)) && ((char) l.get(i)) != '♀') {
                        cont++;
                    }

                }
                char letra = ((char) l.get(i));
                if (((char) l.get(i)) != '♀') {
                    lista.insert(new Caracter((char) l.get(i), cont));
                }
                for (int j = 0; j < l.size(); j++) {
                    if (((char) l.get(j)) == letra) {
                        l.set(j, '♀');
                    }
                }
            }

            List arboles = new List(200);
            for (int i = 0; i < lista.length; i++) {
                Nodo root = new Nodo(((Caracter) lista.get(i)));
                Arbol arbol = new Arbol(root);
                arboles.insert(arbol);
            }

            boolean salir = true;
            do {
                for (int i = 0; i < arboles.length; i++) {
                    Arbol arb1 = ((Arbol) arboles.get(i));
                    Nodo nodo1 = (arb1.getRaiz());
                    Caracter c1 = (nodo1.getData());
                    int valor1 = c1.getNumero();
                    for (int j = i + 1; j < arboles.length; j++) {
                        Arbol arb2 = ((Arbol) arboles.get(j));
                        Nodo nodo2 = arb2.getRaiz();
                        Caracter c2 = (nodo2.getData());
                        int valor2 = c2.getNumero();
                        if (valor2 < valor1) {
                            Arbol aux = ((Arbol) arboles.get(i));
                            arboles.set(i, ((Arbol) arboles.get(j)));
                            arboles.set(j, aux);
                        }
                    }
                }

                if (arboles.length == 1) {
                    salir = false;
                } else {
                    Arbol arbol1 = ((Arbol) arboles.get(0));
                    Arbol arbol2 = ((Arbol) arboles.get(1));
                    Nodo nodo1 = (arbol1.getRaiz());
                    Caracter c1 = (nodo1.getData());
                    Nodo nodo2 = (arbol2.getRaiz());
                    Caracter c2 = (nodo2.getData());
                    int suma = c1.getNumero() + c2.getNumero();
                    Caracter caracter = new Caracter('▼', suma);
                    Nodo raiz = new Nodo(caracter);
                    Arbol nuevo = new Arbol(raiz);
                    nuevo.getRaiz().setHojaI(nodo1);
                    nuevo.getRaiz().setHolaD(nodo2);
                    arboles.delete(0);
                    arboles.delete(0);
                    arboles.insert(nuevo);
                }
            } while (salir);

            Arbol huffman = ((Arbol) arboles.get(0));

            huffman.getRaiz().getData().setCaracter('•');
            huff(huffman.getRaiz(), "2");
            //text_huffman.setText("");
            /*for (int i = 0; i < codes.length; i++) {
                String car = ((Caracter)codes.get(i)).getCode();
                char ce = ((Caracter)codes.get(i)).getCaracter();
                text_huffman.append(ce+"_"+car+" ");
                
            }*/

 /*for (int i = 0; i < arboles.length; i++) {
                Arbol arb2 = ((Arbol) arboles.get(i));
                Nodo nodo2 = arb2.getRaiz();
                Caracter c2 = (nodo2.getData());
                System.out.print(c2.getCaracter());
                System.out.print(" "+c2.getNumero());
                System.out.println();
            }*/

 /*for (int i = 0; i < lista.length; i++) {
                System.out.print(((Caracter)lista.get(i)).getCaracter());
                System.out.print(" "+((Caracter)lista.get(i)).getNumero());
                System.out.println("");
                
            }*/
            String tempo = ((Caracter) codes.get(codes.length - 1)).getCode();

            tempo += "1";

            ((Caracter) codes.get(codes.length - 1)).setCode(tempo);
            String acumulador = "";
            for (int i = 0; i < texto.length(); i++) {
                for (int j = 0; j < codes.length; j++) {
                    if (texto.charAt(i) == ((Caracter) codes.get(j)).getCaracter()) {
                        acumulador += ((Caracter) codes.get(j)).getCode();
                    }
                }
            }
            int cont = 0;
            String comprimido = "", acum2 = "";
            for (int i = 0; i < acumulador.length(); i++) {
                if (cont == 8) {
                    int exp = 7;
                    int numero = 0;
                    for (int j = 0; j < acum2.length(); j++) {
                        if (acum2.charAt(j) == '1') {
                            numero += Math.pow(2, exp);
                        }
                        exp--;
                    }

                    char letra = (char) (numero);
                    comprimido += letra;
                    cont = 0;
                    acum2 = "";
                } else {
                    acum2 += acumulador.charAt(i);
                    cont++;
                }
                if (i == acumulador.length() - 1 && !"".equals(acum2)) {
                    comprimido += acum2;
                }
            }

            text_huffman.append("\n" + "Texto comprimido: " + comprimido);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocurrio un error");
        }


    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed

        try {
            /*int cantidadNodos = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese la cantidad de nodos"));
            while (cantidadNodos <= 0) {
                cantidadNodos = Integer.parseInt(JOptionPane.showInputDialog(this, "Numero ingresado incorrecto, ingrese nuevamente"));
            }
            List nodos = new List(200);
            for (int i = 0; i < cantidadNodos; i++) {
                nodos.insert(new NodoBi(i + 1));
            }

            for (int i = 1; i <= cantidadNodos; i++) {
                boolean seguir = true;
                int cont = 0;
                do {

                    boolean isIn = false;
                    int conectado = Integer.parseInt(JOptionPane.showInputDialog(this, "A que nodo esta conectado el nodo: " + i));
                    for (int j = 0; j < ((NodoBi) nodos.get(i - 1)).getAristas().length; j++) {
                        List a = ((NodoBi) nodos.get(i - 1)).getAristas();

                        if (conectado == ((int) a.get(j))) {
                            isIn = true;
                        }
                    }
                    while (conectado == i || conectado <= 0 || conectado > cantidadNodos || isIn) {
                        conectado = Integer.parseInt(JOptionPane.showInputDialog(this, "Numero incorrecto, ingrese nuevamente"));
                        isIn = false;
                        for (int j = 0; j < ((NodoBi) nodos.get(i - 1)).getAristas().length; j++) {
                            List a = ((NodoBi) nodos.get(i - 1)).getAristas();

                            if (conectado == ((int) a.get(j))) {
                                isIn = true;
                            }
                        }
                    }
                    ((NodoBi) nodos.get(i - 1)).getAristas().insert(conectado);
                    cont++;
                    String opcion = "s";
                    if (cont != cantidadNodos - 1) {
                        opcion = JOptionPane.showInputDialog(this, "Desea agregar mas aristas? [s/n]");
                    } else {
                        JOptionPane.showMessageDialog(this, "El nodo no se puede conectar a mas nodos");
                        cont = 0;
                        seguir = false;
                    }
                    if ("n".equals(opcion)) {
                        seguir = false;
                    }
                } while (seguir);

            }
            Grafo graph = new Grafo(nodos);

            int matrix[][] = new int[cantidadNodos][cantidadNodos];
            for (int i = 0; i < cantidadNodos; i++) {
                for (int j = 0; j < cantidadNodos; j++) {
                    matrix[i][j] = 0;
                }
            }
            for (int i = 0; i < cantidadNodos; i++) {
                List temporal = ((NodoBi) nodos.get(i)).getAristas();
                for (int j = 0; j < temporal.length; j++) {
                    int num = ((int) temporal.get(j));
                    matrix[i][num - 1] = 1;
                    matrix[num - 1][i] = 1;
                }
            }
            
            for (int i = 0; i < cantidadNodos; i++) {
                boolean is = false;
                for (int j = 0; j < cantidadNodos; j++) {
                    is = false;
                    if(matrix[i][j] == 1){
                        for (int k = 0; k <((NodoBi) nodos.get(j)).getAristas().length; k++) {
                            int numero = ((int) ((NodoBi) nodos.get(j)).getAristas().get(k));
                            if(numero==i+1){
                                is = true;
                            }
                        }
                        if(!is){
                            ((NodoBi) nodos.get(j)).getAristas().insert(i+1);
                        }
                    }
                }
            }
            StackNodos estack = new StackNodos(200);
            estack.push((NodoBi) nodos.get(0));
            ((NodoBi) nodos.get(0)).setVisitado(true);
            while (!estack.isEmpty()) {

            }*/
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            if (!GrafoNodos.isEmpty()) {
                GrafoNodos.clear();
            }
            modelo = (DefaultComboBoxModel) combo.getModel();
            modelo.removeAllElements();
            int cantidad = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese la cantidad de nodos"));
            while (cantidad <= 0) {
                cantidad = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese la cantidad de nodos"));
            }
            for (int i = 1; i <= cantidad; i++) {
                GrafoNodos.insert(new NodoBi(i));
                modelo.addElement(i);
            }

            mode = (DefaultTableModel) tabla.getModel();
            mode.setRowCount(0);
            modelo2 = (DefaultComboBoxModel) combo2.getModel();
            modelo2.removeAllElements();

            BiGrafo.pack();
            BiGrafo.setModal(true);
            BiGrafo.setVisible(true);
            BiGrafo.setLocationRelativeTo(this);
        } catch (Exception e) {
            //e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Ocurrio un error");
        }


    }//GEN-LAST:event_jButton22ActionPerformed

    private void comboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboItemStateChanged

        try {
            int pos = Integer.parseInt(combo.getSelectedItem() + "");
            boolean verificar = true;
            //modelo2 = (DefaultComboBoxModel) combo2.getModel();
            modelo2.removeAllElements();
            for (int i = 0; i < GrafoNodos.length; i++) {
                verificar = true;
                for (int j = 0; j < ((NodoBi) GrafoNodos.get(i)).getAristas().length; j++) {
                    int num = Integer.parseInt(((NodoBi) GrafoNodos.get(i)).getAristas().get(j) + "");
                    if (num == pos) {
                        verificar = false;
                    }
                }
                if (verificar && pos != i + 1) {
                    modelo2.addElement(i + 1);
                }
            }
        } catch (Exception e) {
            /*e.printStackTrace();
            JOptionPane.showMessageDialog(BiGrafo, "Ocurrio un error");*/
        }

    }//GEN-LAST:event_comboItemStateChanged

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        try {
            int pos = Integer.parseInt(combo.getSelectedItem() + "");
            int pos2 = Integer.parseInt(combo2.getSelectedItem() + "");

            mode.setRowCount(0);
            for (int i = 0; i < GrafoNodos.length; i++) {
                if (((NodoBi) GrafoNodos.get(i)).getNombre() == pos) {
                    ((NodoBi) GrafoNodos.get(i)).getAristas().insert(pos2);
                }
                if (((NodoBi) GrafoNodos.get(i)).getNombre() == pos2) {
                    ((NodoBi) GrafoNodos.get(i)).getAristas().insert(pos);
                }
            }
            String palabra = "";
            for (int i = 0; i < GrafoNodos.length; i++) {
                palabra = "";
                for (int j = 0; j < ((NodoBi) GrafoNodos.get(i)).getAristas().length; j++) {
                    palabra += ((NodoBi) GrafoNodos.get(i)).getAristas().get(j) + " ,";
                }
                Object row[] = {((NodoBi) GrafoNodos.get(i)).getNombre(), palabra};
                mode.addRow(row);
            }
            modelo2.removeAllElements();
        } catch (Exception e) {
            //e.printStackTrace();
            JOptionPane.showMessageDialog(BiGrafo, "Ocurrio un error");
        }
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed

        try {
            StackNodos estack = new StackNodos(200);
            estack.push((NodoBi) GrafoNodos.get(0));
            ((NodoBi) GrafoNodos.get(0)).setVisitado(true);
            ((NodoBi) GrafoNodos.get(0)).setColor(Color.blue);
            boolean bicolor = true;
            while (!estack.isEmpty() && bicolor) {
                NodoBi temp = estack.Pop();
                List h = temp.getAristas();
                temp.setVisitado(true);
                for (int i = 0; i < temp.getAristas().length; i++) {
                    int num = (int) h.get(i);
                    if (((NodoBi) GrafoNodos.get(num - 1)).isVisitado()) {
                        if (temp.getColor() == Color.white && ((NodoBi) GrafoNodos.get(num - 1)).getColor() == Color.BLUE) {
                            temp.setColor(Color.red);
                        }
                        if (temp.getColor() == Color.white && ((NodoBi) GrafoNodos.get(num - 1)).getColor() == Color.red) {
                            temp.setColor(Color.blue);
                        }
                        if (temp.getColor() == Color.red && ((NodoBi) GrafoNodos.get(num - 1)).getColor() == Color.red) {
                            bicolor = false;
                        }
                        if (temp.getColor() == Color.blue && ((NodoBi) GrafoNodos.get(num - 1)).getColor() == Color.blue) {
                            bicolor = false;
                        }

                    } else {
                        estack.push((NodoBi) GrafoNodos.get(num - 1));
                    }
                }
            }
            if (bicolor) {
                JOptionPane.showMessageDialog(this, "El grafo es bicoloreable");
            } else {
                JOptionPane.showMessageDialog(this, "El grafo no es bicoloreable");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocurrio un error");
        }
    }//GEN-LAST:event_jButton24ActionPerformed

    private void destinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_destinoActionPerformed

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        int cantidad = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese la cantidad de nodos"));
        while (cantidad <= 0) {
            cantidad = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese la cantidad de nodos"));
        }
        Dijnodos = new ArrayList();
        modelo = (DefaultComboBoxModel) origen.getModel();
        modelo.removeAllElements();
        for (int i = 0; i < cantidad; i++) {
            Dijnodos.add(new NodoDij(i + 1));
            modelo.addElement(i + 1);
        }

        mode = (DefaultTableModel) tabla2.getModel();
        mode.setRowCount(0);
        modelo2 = (DefaultComboBoxModel) destino.getModel();
        modelo2.removeAllElements();

        DiGrafo.pack();
        DiGrafo.setModal(true);
        DiGrafo.setVisible(true);
        DiGrafo.setLocationRelativeTo(this);

    }//GEN-LAST:event_jButton25ActionPerformed

    private void origenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_origenItemStateChanged
        try {
            int pos = Integer.parseInt(origen.getSelectedItem() + "");
            boolean verificar = true;
            //modelo2 = (DefaultComboBoxModel) combo2.getModel();
            modelo2.removeAllElements();
            boolean verificar2 = false;
            int cont = 0;
            for (int i = 0; i < Dijnodos.size(); i++) {
                verificar = true;
                verificar2 = false;
                cont++;
                for (int j = 0; j < Dijnodos.get(pos - 1).getArista().size(); j++) {
                    if (cont == pos) {
                        verificar = false;
                    }
                    if (cont == Dijnodos.get(pos - 1).getArista().get(j).getDestino()) {
                        verificar = false;
                    }
                }
                for (int j = 0; j < Dijnodos.get(i).getArista().size(); j++) {
                    int num = Dijnodos.get(i).getArista().get(j).getDestino();
                    if (num == pos) {
                        verificar = false;
                        verificar2 = true;
                    }
                }
                if (verificar && pos != i + 1) {
                    if (verificar2) {
                        modelo2.addElement(i + 1);
                    }

                }
                if (verificar && pos != i + 1) {
                    modelo2.addElement(cont);
                }
            }
        } catch (Exception e) {
            /*e.printStackTrace();
            JOptionPane.showMessageDialog(BiGrafo, "Ocurrio un error");*/
        }
    }//GEN-LAST:event_origenItemStateChanged

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
        try {
            int pos = Integer.parseInt(origen.getSelectedItem() + "");
            int pos2 = Integer.parseInt(destino.getSelectedItem() + "");

            mode.setRowCount(0);
            for (int i = 0; i < Dijnodos.size(); i++) {
                Arista temp = new Arista(pos, pos2, (int) spinner.getValue());
                if (Dijnodos.get(i).getNombre() == pos) {
                    Dijnodos.get(i).getArista().add(temp);
                }

            }

            for (int i = 0; i < Dijnodos.size(); i++) {
                for (int j = 0; j < Dijnodos.get(i).getArista().size(); j++) {
                    Object row[] = {Dijnodos.get(i).getNombre(), Dijnodos.get(i).getArista().get(j).getDestino(), Dijnodos.get(i).getArista().get(j).getPeso()};
                    mode.addRow(row);
                }
            }
            modelo2.removeAllElements();
        } catch (Exception e) {
            //e.printStackTrace();
            JOptionPane.showMessageDialog(BiGrafo, "Ocurrio un error");
        }
    }//GEN-LAST:event_jButton26ActionPerformed

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        try {
            int origin = Integer.parseInt(JOptionPane.showInputDialog(this, "Cual es el origen?"));
            while (origin > Dijnodos.size() || origin <= 0) {
                origin = Integer.parseInt(JOptionPane.showInputDialog(this, "Cual es el origen?"));
            }
            Dijnodos.get(origin - 1).setVisitado(true);
            int[] arreglo = new int[Dijnodos.size()];
            for (int i = 0; i < arreglo.length; i++) {
                arreglo[i] = 500000;
            }
            arreglo[origin - 1] = 0;

            for (int i = 0; i < Dijnodos.get(origin - 1).getArista().size(); i++) {
                int weigth = Dijnodos.get(origin - 1).getArista().get(i).getPeso(), destiny = Dijnodos.get(origin - 1).getArista().get(i).getDestino();
                arreglo[destiny - 1] = weigth;
            }
       
            boolean controlar = true;
            for (int i = 0; i < Dijnodos.size(); i++) {
                if (!Dijnodos.get(i).isVisitado()) {
                    controlar = false;
                }
            }
            System.out.println(Arrays.toString(arreglo));
            while (!controlar) {
                int menor = 100, posicion = 0;
                for (int i = 0; i < Dijnodos.size(); i++) {
                    if ((menor > arreglo[i]) && (arreglo[i] != 0) && (!Dijnodos.get(i).isVisitado())) {
                        menor = arreglo[i];
                        posicion = i;
                    }
                }
                Dijnodos.get(posicion).setVisitado(true);
                int[] temp = arreglo;
                int acumulado = arreglo[posicion];
                for (int i = 0; i < Dijnodos.get(posicion).getArista().size(); i++) {
                    int weigth = Dijnodos.get(posicion).getArista().get(i).getPeso();
                    int destiny = Dijnodos.get(posicion).getArista().get(i).getDestino();
                    if (arreglo[destiny - 1] != 0 && weigth < 500000) {
                        arreglo[destiny - 1] = weigth+acumulado;
                    }
                }
                controlar = true;
                for (int i = 0; i < Dijnodos.size(); i++) {
                    if (!Dijnodos.get(i).isVisitado()) {
                        controlar = false;
                    }
                }
            }
            System.out.println(Arrays.toString(arreglo));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton27ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog BiGrafo;
    private javax.swing.JDialog DiGrafo;
    private javax.swing.JTextArea calcu_text;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JComboBox<String> combo2;
    private javax.swing.JComboBox<String> destino;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox<String> origen;
    private javax.swing.JSpinner spinner;
    private javax.swing.JTable tabla;
    private javax.swing.JTable tabla2;
    private javax.swing.JTextArea text_area1;
    private javax.swing.JTextArea text_huffman;
    // End of variables declaration//GEN-END:variables
    int[][] matriz;
    String texto = "";
    static String Hacum = "";
    static List codes = new List(100);
    List GrafoNodos = new List(200);
    ArrayList<NodoDij> Dijnodos;
    DefaultComboBoxModel modelo2;
    DefaultComboBoxModel modelo;
    DefaultTableModel mode;

    public static void huff(Nodo root, String codigo) {
        if (root != null) {
            Caracter c = root.getData();
            if (!"2".equals(codigo)) {
                Hacum += codigo;
            }
            if (root.getHojaI() == null || root.getHolaD() == null) {
                codes.insert(new Caracter(c.getCaracter(), Hacum));
                String temp = Hacum.substring(0, Hacum.length() - 1);
                Hacum = temp;
            }

            huff(root.getHojaI(), "0");
            if (c.getCaracter() == '•') {
                Hacum = "";
            }
            huff(root.getHolaD(), "1");

            if (Hacum.length() > 1) {
                String temp = Hacum.substring(0, Hacum.length() - 1);
                Hacum = temp;
            }
        }
    }
}
